name: nested matrix
env: 
  BATCH_SIZE: 2  
on: 
  pull_request:
    branches: [ my-protected ]
  
  workflow_dispatch:

jobs:
  generate-matrix:
    runs-on: ubuntu-latest
    outputs:
      out_matrix: ${{ steps.generate-matrix.outputs.batch_matrix }}    
    steps:
      - name: Git checkout
        uses: actions/checkout@v3

      - name: generate matrix
        id: generate-matrix
        run: |

          BATCH_SIZE=3
          clusters=($(find test-dirs  -type d -maxdepth 2 -mindepth 2 | sort))

          function join_by { local IFS="$1"; shift; echo "$*"; }

          # construct a json array each containing a string of list of directories with size of BATCH_SIZE and use vertical bar to separate them  
          # e.g. ["test-dirs/cluster1/1|test-dirs/cluster1/2", "test-dirs/cluster2/1|test-dirs/cluster2/2"] 

          for ((i=0; i<${#clusters[@]}; i+=BATCH_SIZE)); do
              batch=("${clusters[@]:i:BATCH_SIZE}")
              batch=$(join_by "|" "${batch[@]}")
              echo $batch
              cluster_array+=("\"$batch\"")
          done
          cluster_array_json=$(join_by ", " "${cluster_array[@]}")
          echo "$cluster_array_json"
                    # set output for the job
          echo "batch_matrix=[ $cluster_array_json ]" >> $GITHUB_OUTPUT


  build:
    runs-on: ubuntu-latest
    needs: [generate-matrix]    
    strategy:
      matrix:
        # get the matrix from the previous job
        batch: ${{ fromJson(needs.generate-matrix.outputs.out_matrix) }}  

    steps:
      - name: check matrix content "${{ matrix.batch }}""
        run: |
          batch="${{ matrix.batch }}"
          echo "$batch"
          clusters="${batch//|/ }"
          for c in ${clusters}; do
            echo $c
          done
          exit 22

  nested-wf-done:
    if: ${{ failure() }}
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Check previous job status
        run: |
          echo "previous job failed"
          exit 11
